#!/usr/bin/env python3
# This program provides common operations for Istio mesh expansion for incfly@ personal purpose.
# Hopefully some features can get into offical tooling, istioctl eventually.
# Sample usage
#
# eztio init <default-project> <default-zone> <cluster-name>
#   install config in $HOME./istiocfg/ folder
#
# eztio install <version> <helm-flag> --join=<mesh-id> --vpn
#   install istio with some options.
#
# eztio meshexp setup <vm-instance-name> --platform=gcp \
#   --zone=us-central1-a
#  setup meshexp instance.
#
# eztio meshexp add <service> <port> // invoking istioctl eventually.
# eztio meshexp remove <service> // invoking istioctl eventually.
#
# eztio status // reporting istio status from .istio/ directory

import argparse
import urllib.request
import os
import sys
import subprocess
import lib.meshexp as meshexp
import lib.install as install


def setup_parser():
  parser = argparse.ArgumentParser(
    description='eztio, make daily Istio easier...')
  sub_parser = parser.add_subparsers()

  # install
  install_parser = sub_parser.add_parser(
    'install',
    help='Install Istio with some option.')
  install_parser.add_argument('version', type=str,
    choices=['1.1.2'],
    help='Istio version to install, e.g. 1.1.2')
  install_parser.set_defaults(func=install.install_handler)

  # uninstall
  uninstall_parser = sub_parser.add_parser(
    'uninstall',
    help='Uninstall Istio from the cluster')
  uninstall_parser.set_defaults(func=install.uninstall_handler)

  # meshexp
  meshexp_parser = sub_parser.add_parser(
    'meshexp',
    help='Istio mesh expansion management.'
  )
  meshexp_parser.add_argument(
    'operation', type=str,
    choices=['init', 'setup', 'add', 'remove'],
    help='actions for the mesh expansion')
  meshexp_parser.add_argument(
    '--vm', type=str,
    help='name of the vm instance to opearate on for mesh expansion')
  meshexp_parser.set_defaults(func=meshexp.handler)
  return parser


if __name__ == "__main__":
  parser = setup_parser()
  if len(sys.argv) < 2:
    parser.print_usage()
    sys.exit(1)
  args = parser.parse_args()
  args.func(args)